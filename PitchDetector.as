package {	import util.NumberUtils;	import voice.BaseVoiceApplication;	import voice.VoiceDataEvent;	import flash.display.Loader;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.display.Shape;	import flash.net.URLRequest;	import flash.events.Event;	/**	 *@author Jankees.van.Woezik (base42.nl)	 *@author Patrick.Brouwer (base42.nl)	 *@version 2.0	 */	public class PitchDetector extends BaseVoiceApplication {				public static const GAME_WIDTH:Number = 800;		public static const GAME_HEIGHT:Number = 600;				private var high_pitch_image_loader:Loader;		private var low_pitch_image_loader:Loader;		private var imageLow:Bitmap;		private var imageHigh:Bitmap;		private var square:Shape;		public function PitchDetector() {			high_pitch_image_loader = new Loader();			high_pitch_image_loader.load(new URLRequest("resources/beegees.jpg"));			high_pitch_image_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, highImageLoaded);			low_pitch_image_loader = new Loader();			low_pitch_image_loader.load(new URLRequest("resources/barrywhite.jpg"));			low_pitch_image_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, lowImageLoaded);			var squareSize:uint=100;			square = new Shape();			square.graphics.beginFill(0xFF0000, 0.5);			square.graphics.drawRect(0, 0, squareSize, squareSize);			square.graphics.endFill();			addChild(square);		}		override protected function handleVoiceEvents(event:VoiceDataEvent):void {			super.handleVoiceEvents(event);			movePads();		}		private function lowImageLoaded(event:Event):void {			imageLow=new Bitmap(event.target.content.bitmapData);			//addChild(imageLow);		}		private function highImageLoaded(event:Event):void {			imageHigh=new Bitmap(event.target.content.bitmapData);			//addChild(imageHigh);		}		private function movePads():void {			var newY:Number;			if (_voiceDataLeft.pitch>0) {				if (_voiceDataLeft.pitch<1.2) {					imageLow.alpha=1;				} else {					imageLow.alpha=0;				}								trace(_voiceDataLeft.pitch * imageHigh.alpha);				square.scaleY = (_voiceDataLeft.amplitude / 60);    				newY = square.y + (calculateNewVerticalPosition(_voiceDataLeft.pitch) - square.y) * 0.1;				newY = NumberUtils.limit(newY,(square.height/2), GAME_HEIGHT - (square.height/2));    				square.y = newY;			}			if (_voiceDataRight.pitch>0) {				if (_voiceDataLeft.pitch<1.2) {					imageLow.alpha=1;				} else {					imageLow.alpha=0;				}								square.scaleY = (_voiceDataRight.amplitude / 60);    				newY = square.y + (calculateNewVerticalPosition(_voiceDataRight.pitch) - square.y) * 0.1;				newY = NumberUtils.limit(newY,(square.height/2), GAME_HEIGHT- (square.height/2));				square.y = newY;			}		}				private function calculateNewVerticalPosition(inPitch:Number):Number		{			return stage.stageHeight - (stage.stageHeight * inPitch);						return 0;		}	}}