package {	import util.NumberUtils;	import voice.BaseVoiceApplication;	import voice.VoiceDataEvent;		import flash.display.StageDisplayState;	import flash.display.Loader;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.display.Shape;	import flash.geom.Point;	import flash.net.URLRequest;	import flash.events.Event;	import flash.text.TextField;    import flash.text.TextFieldType;	import flash.text.TextFormat;		import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import flash.display.MovieClip;	/**	 *@author Jankees.van.Woezik (base42.nl)	 *@author Patrick.Brouwer (base42.nl)	 *@version 2.0	 */	public class PitchDetector extends BaseVoiceApplication {				//try the following;		// - change according to colour		// - change to a word		// - make the word tilt by pitch				public static const GAME_WIDTH:Number = 800;		public static const GAME_HEIGHT:Number = 600;				private var high_pitch_image_loader:Loader;		private var low_pitch_image_loader:Loader;		private var imageLow:Bitmap;		private var imageHigh:Bitmap;		private var square:Shape;		        private var format1_fmt:TextFormat;		private var format2_fmt:TextFormat;		public var targetMc:MovieClip;		public var volume_reading:TextField;				public function setTargetClip(movieClip:MovieClip)		{			this.targetMc = movieClip;			trace("Clip mx: ", targetMc, movieClip);		}		public function PitchDetector() {			high_pitch_image_loader = new Loader();			high_pitch_image_loader.load(new URLRequest("resources/beegees.jpg"));			high_pitch_image_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, highImageLoaded);			low_pitch_image_loader = new Loader();			low_pitch_image_loader.load(new URLRequest("resources/barrywhite.jpg"));			low_pitch_image_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, lowImageLoaded);						TweenPlugin.activate([TransformMatrixPlugin]);						stage.displayState=StageDisplayState.FULL_SCREEN;						swapImage("resources/beegees.jpg","resources/barrywhite.jpg");		}				public function errorChecker(type:String):void {			switch (type)			{				case "image":				trace(1);				break;			}					}				public function swapImage(h_url:String, l_url:String):void {			var image_loader:Loader = new Loader();			image_loader.load(new URLRequest(h_url))			image_loader.load(new URLRequest(l_url))			//image_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, errorChecker('image'));		}				public function adjustColor():void {					}				public function adjustHeight():void {					}				public function adjustWidth():void {					}				override protected function handleVoiceEvents(event:VoiceDataEvent):void {			super.handleVoiceEvents(event);			movePads();		}				private function lowImageLoaded(event:Event):void {			imageLow=new Bitmap(event.target.content.bitmapData);			//addChild(imageLow);		}		private function highImageLoaded(event:Event):void {			imageHigh=new Bitmap(event.target.content.bitmapData);			//addChild(imageHigh);		}		private function movePads():void {			//var newY:Number;			//if (_voiceDataLeft.pitch>0) {							if (targetMc==null){				trace("BREAK;");				return;			}								trace("pitch = " + _voiceDataLeft.pitch);				trace("volume = " + _voiceDataLeft.amplitude);				if (_voiceDataLeft.pitch>0.8) {					//TweenMax.to(targetMc, 2, {transformMatrix:{skewX:25}});				} else {					//TweenMax.to(targetMc, 0.2, {transformMatrix:{skewX:0}, delay:4});				}								//angry				//softly spoken				volume_reading.text = String(_voiceDataLeft.amplitude);				if (_voiceDataLeft.amplitude > 75) {					if(targetMc.width >= 261 && targetMc.height <= 324) {						targetMc.width = targetMc.width - (_voiceDataLeft.amplitude - 20);						targetMc.height = targetMc.height + (_voiceDataLeft.amplitude - 20);					}					TweenMax.to(targetMc, 0, {colorTransform:{tint:0xff0000, tintAmount:1}});									} else if(_voiceDataLeft.amplitude < 72) {					TweenMax.to(targetMc, 1.5, {colorTransform:{tint:0x00CC00, tintAmount:1}, delay:1.5});					TweenMax.to(targetMc, 1, {width: 409.9, delay:1.5});					TweenMax.to(targetMc, 1, {height: 184, delay:1.5});				}																/*trace(_voiceDataLeft.pitch * imageHigh.alpha);				square.scaleY = (_voiceDataLeft.amplitude / 60);    				newY = square.y + (calculateNewVerticalPosition(_voiceDataLeft.pitch) - square.y) * 0.1;				newY = NumberUtils.limit(newY,(square.height/2), GAME_HEIGHT - (square.height/2));    				square.y = newY;*/			//}			//if (_voiceDataRight.pitch>0) {												if (_voiceDataLeft.amplitude > 75) {					if(targetMc.width >= 261 && targetMc.height <= 324) {						targetMc.width = targetMc.width - (_voiceDataLeft.amplitude - 20);						targetMc.height = targetMc.height + (_voiceDataLeft.amplitude - 20);					}					TweenMax.to(targetMc, 0, {colorTransform:{tint:0xff0000, tintAmount:1}});									} else if(_voiceDataLeft.amplitude < 72) {					TweenMax.to(targetMc, 1.5, {colorTransform:{tint:0x00CC00, tintAmount:1}, delay:1.5});					TweenMax.to(targetMc, 1, {width: 409.9, delay:1.5});					TweenMax.to(targetMc, 1, {height: 184, delay:1.5});				}								/*if (_voiceDataLeft.pitch<1.2) {					imageLow.alpha=1;				} else {					imageLow.alpha=0;				}*/								/*square.scaleY = (_voiceDataRight.amplitude / 60);    				newY = square.y + (calculateNewVerticalPosition(_voiceDataRight.pitch) - square.y) * 0.1;				newY = NumberUtils.limit(newY,(square.height/2), GAME_HEIGHT- (square.height/2));				square.y = newY;*/			//}		}				private function calculateNewVerticalPosition(inPitch:Number):Number		{			return stage.stageHeight - (stage.stageHeight * inPitch);						return 0;		}	}}